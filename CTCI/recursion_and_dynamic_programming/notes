Knapsack Problem using Dynamic Programming - (Check code to understand)

1. Create a 2D array with (n+1) rows and (capacity+1) columns
capacity = 10, weights = [1, 3, 5, 6], values = [20, 30, 10, 50], n = 4 (len(values))
2. 2D Array will be of the form - (Initially) -

    capacity ->
  w 0 0 0 0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0

3.    for i in range(n+1):
        for j in range(capacity+1):
            if i == 0 or j == 0:
                matrix[i][j] = 0

i is iterating over rows, j is iterating over columns
if capacity is 0 or weight of item is zero, it means no item is going into the bag.
So, mark the index of the matrix as 0

4. elif weights[i-1] <= j:
        matrix[i][j] = max(vals[i-1] + matrix[i-1][j-weights[i-1]], matrix[i-1][j])
    
Compare the new weight which can be put into the bag with sum of 2 smaller items that
can go in the bag as seen before and put the larger value one in the bag

5.  else:
        matrix[i][j] = matrix[i-1][j]

If the weight of the object is more than capacity pick the object which was chosen
before for the same capacity.

6. The last index is the answer.


-----------------------------------------------------------------------------------------------------

Knapsack Recursively (Not Dynamic Programming) -
1. Select Base Case - (Think of the smallest valid input)
2. Create a choice diagram - 
    Here choice diagram will be like-
    If the item weight is less than capacity (it can fit in bag), we have 2 choices -
    a> Either select the item (put it in bag), or
    b> Discard the item so the bag capacity remains same
    If the item weight is greater than capacity (item cannot fit), we have only 1 choice -
    a> Discard the item as it cannot fit. (capacity remains same)
3. Code for the base case and the choice diagram.

------------------------------------------------------------------------------------------------------

